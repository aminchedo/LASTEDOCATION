name: Build and Push Docker Images

on:
  push:
    branches: [main, develop, cursor/**]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_CLIENT: ${{ github.repository }}/client
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend

jobs:
  build-client:
    name: Build Client Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}
          tags: |
            # For PRs: pr-<number>
            type=ref,event=pr,prefix=pr-
            # For branches: branch name
            type=ref,event=branch
            # For tags: semver
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            # SHA: Use 'sha-' prefix to avoid leading hyphen
            type=sha,prefix=sha-,format=short
            # Latest tag for main branch
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ./client
          file: ./client/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=20
      
      - name: Generate artifact attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_CLIENT }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  build-backend:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      attestations: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          tags: |
            type=ref,event=pr,prefix=pr-
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            # Use 'sha-' prefix to avoid leading hyphen
            type=sha,prefix=sha-,format=short
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ./BACKEND
          file: ./BACKEND/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_VERSION=20
      
      - name: Generate artifact attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
