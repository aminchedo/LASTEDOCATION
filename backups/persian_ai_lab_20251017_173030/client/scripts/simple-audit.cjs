const fs = require('fs');
const path = require('path');

function getAllFiles(dir, extensions = ['.tsx', '.ts']) {
  const files = [];
  
  if (!fs.existsSync(dir)) return files;
  
  const items = fs.readdirSync(dir);
  
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
      files.push(...getAllFiles(fullPath, extensions));
    } else if (extensions.some(ext => item.endsWith(ext))) {
      files.push(fullPath);
    }
  }
  
  return files;
}

function extractRoutesFromApp() {
  const appPath = path.join(process.cwd(), 'src/App.tsx');
  
  if (!fs.existsSync(appPath)) {
    return [];
  }
  
  const content = fs.readFileSync(appPath, 'utf-8');
  const routes = [];
  const routeRegex = /path=["']([^"']+)["']/g;
  let match;
  
  while ((match = routeRegex.exec(content)) !== null) {
    routes.push(match[1]);
  }
  
  return routes;
}

function getTailwindVersion() {
  const packageJsonPath = path.join(process.cwd(), 'package.json');
  
  if (!fs.existsSync(packageJsonPath)) {
    return 'Not found';
  }
  
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
  return packageJson.devDependencies?.tailwindcss || packageJson.dependencies?.tailwindcss || 'Not found';
}

function categorizeFiles(files) {
  const pages = [];
  const components = [];
  
  for (const file of files) {
    const relativePath = path.relative(path.join(process.cwd(), 'src'), file);
    
    if (relativePath.includes('pages/') || relativePath.includes('page/') || relativePath.endsWith('Page.tsx')) {
      pages.push(relativePath);
    } else if (relativePath.includes('components/') || relativePath.includes('component/') || relativePath.includes('ui/')) {
      components.push(relativePath);
    }
  }
  
  return { pages, components };
}

function generateReport(result) {
  const timestamp = new Date().toISOString();
  
  return `# UI Update Report

Generated: ${timestamp}

## Summary

- **Total TypeScript/TSX Files**: ${result.totalFiles}
- **Pages**: ${result.pages.length}
- **Components**: ${result.components.length}
- **Routes**: ${result.routes.length}
- **Tailwind Version**: ${result.tailwindVersion}

## Pages

${result.pages.map(page => `- \`${page}\``).join('\n')}

## Components

${result.components.map(component => `- \`${component}\``).join('\n')}

## Routes

${result.routes.map(route => `- \`${route}\``).join('\n')}

## Notes

This report was generated by the UI audit script. All numbers reflect the actual state of the codebase at the time of generation.
`;
}

function main() {
  const srcDir = path.join(process.cwd(), 'src');
  
  if (!fs.existsSync(srcDir)) {
    console.error('src directory not found');
    process.exit(1);
  }
  
  console.log('üîç Running UI audit...\n');
  
  const allFiles = getAllFiles(srcDir);
  const { pages, components } = categorizeFiles(allFiles);
  const routes = extractRoutesFromApp();
  const tailwindVersion = getTailwindVersion();
  
  const result = {
    totalFiles: allFiles.length,
    pages,
    components,
    routes,
    tailwindVersion
  };
  
  const report = generateReport(result);
  const reportPath = path.join(process.cwd(), 'UI_UPDATE_REPORT.md');
  
  fs.writeFileSync(reportPath, report);
  
  console.log('üìä Audit Results:');
  console.log(`   Total Files: ${result.totalFiles}`);
  console.log(`   Pages: ${result.pages.length}`);
  console.log(`   Components: ${result.components.length}`);
  console.log(`   Routes: ${result.routes.length}`);
  console.log(`   Tailwind: ${result.tailwindVersion}`);
  console.log(`\nüìÑ Report saved to: ${reportPath}`);
}

main();
