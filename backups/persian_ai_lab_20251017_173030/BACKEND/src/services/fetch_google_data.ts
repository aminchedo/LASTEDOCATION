#!/usr/bin/env ts-node
/**
 * Google Data Ingestion Script (TypeScript)
 * Fetches Persian domain-specific data from Google sources
 * Outputs: /datasets/raw/google_data.jsonl
 */

import * as fs from 'fs';
import * as path from 'path';
import * as crypto from 'crypto';

interface Message {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

interface ConversationData {
  messages: Message[];
  source?: string;
}

/**
 * Normalize Persian text (Arabic to Persian conversion)
 */
function normalizePersian(text: string): string {
  // Arabic to Persian digit conversion
  const digitMap: { [key: string]: string } = {
    'Ÿ†': '€∞', 'Ÿ°': '€±', 'Ÿ¢': '€≤', 'Ÿ£': '€≥', 'Ÿ§': '€¥',
    'Ÿ•': '€µ', 'Ÿ¶': '€∂', 'Ÿß': '€∑', 'Ÿ®': '€∏', 'Ÿ©': '€π'
  };
  
  // Arabic to Persian character conversion
  const charMap: { [key: string]: string } = {
    'ŸÉ': '⁄©',  // Arabic kaf to Persian kaf
    'Ÿä': '€å',  // Arabic yeh to Persian yeh
    'Ÿâ': '€å',  // Alef maksura to Persian yeh
    'ÿ©': 'Ÿá',  // Teh marbuta to heh
  };
  
  let normalized = text;
  for (const [ar, fa] of Object.entries({ ...digitMap, ...charMap })) {
    normalized = normalized.replace(new RegExp(ar, 'g'), fa);
  }
  
  // Normalize whitespace
  normalized = normalized.replace(/\s+/g, ' ').trim();
  
  return normalized;
}

/**
 * Create sample Google-sourced data
 * In production, this would use Google APIs (Drive, Sheets, Custom Search, etc.)
 */
function createGoogleSourcedData(): ConversationData[] {
  const googleData: ConversationData[] = [
    {
      messages: [
        { role: 'system', content: 'ÿ¥ŸÖÿß €å⁄© ÿØÿ≥ÿ™€åÿßÿ± ŸáŸàÿ¥ŸÖŸÜÿØ ŸÅÿßÿ±ÿ≥€å‚Äåÿ≤ÿ®ÿßŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ⁄©ŸÖ⁄© ŸÖ€å‚Äå⁄©ŸÜ€åÿØ.' },
        { role: 'user', content: 'ÿßÿÆÿ®ÿßÿ± ŸÅŸÜÿßŸàÿ±€å ÿßŸÖÿ±Ÿàÿ≤ ⁄Ü€åÿ≥ÿ™ÿü' },
        { role: 'assistant', content: 'ŸÖÿ™ÿ£ÿ≥ŸÅÿßŸÜŸá ŸÖŸÜ ÿ®Ÿá ÿßÿÆÿ®ÿßÿ± ŸÑÿ≠ÿ∏Ÿá‚Äåÿß€å ÿØÿ≥ÿ™ÿ±ÿ≥€å ŸÜÿØÿßÿ±ŸÖÿå ÿßŸÖÿß ŸÖ€å‚Äåÿ™ŸàÿßŸÜŸÖ ÿØÿ±ÿ®ÿßÿ±Ÿá ÿ±ŸàŸÜÿØŸáÿß€å ŸÅŸÜÿßŸàÿ±€å ÿµÿ≠ÿ®ÿ™ ⁄©ŸÜŸÖ. ŸáŸàÿ¥ ŸÖÿµŸÜŸàÿπ€åÿå €åÿßÿØ⁄Ø€åÿ±€å ŸÖÿßÿ¥€åŸÜ Ÿà ÿß€åŸÜÿ™ÿ±ŸÜÿ™ ÿßÿ¥€åÿß ÿßÿ≤ ÿ¨ŸÖŸÑŸá ÿ≠Ÿàÿ≤Ÿá‚ÄåŸáÿß€å Ÿæÿ±ÿ∑ÿ±ŸÅÿØÿßÿ± ŸÅŸÜÿßŸàÿ±€å Ÿáÿ≥ÿ™ŸÜÿØ.' }
      ],
      source: 'google_custom_search'
    },
    {
      messages: [
        { role: 'system', content: 'ÿ¥ŸÖÿß €å⁄© ÿØÿ≥ÿ™€åÿßÿ± ŸáŸàÿ¥ŸÖŸÜÿØ ŸÅÿßÿ±ÿ≥€å‚Äåÿ≤ÿ®ÿßŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ⁄©ŸÖ⁄© ŸÖ€å‚Äå⁄©ŸÜ€åÿØ.' },
        { role: 'user', content: 'ÿ®Ÿáÿ™ÿ±€åŸÜ ÿ±ÿ≥ÿ™Ÿàÿ±ÿßŸÜ‚ÄåŸáÿß€å ÿ™Ÿáÿ±ÿßŸÜ ⁄©ÿØÿßŸÖŸÜÿØÿü' },
        { role: 'assistant', content: 'ÿ™Ÿáÿ±ÿßŸÜ ÿ±ÿ≥ÿ™Ÿàÿ±ÿßŸÜ‚ÄåŸáÿß€å ŸÖÿ™ŸÜŸàÿπ€å ÿØÿßÿ±ÿØ. ÿ®ÿ±ÿß€å ÿßŸÜÿ™ÿÆÿßÿ® ÿ®Ÿáÿ™ÿ±€åŸÜ ÿ±ÿ≥ÿ™Ÿàÿ±ÿßŸÜÿå ÿ®Ÿá ÿ≥ŸÑ€åŸÇŸá ÿ¥ŸÖÿß ÿ®ÿ≥ÿ™⁄Ø€å ÿØÿßÿ±ÿØ. ÿ±ÿ≥ÿ™Ÿàÿ±ÿßŸÜ‚ÄåŸáÿß€å ÿ≥ŸÜÿ™€å ÿß€åÿ±ÿßŸÜ€åÿå ŸÅÿ≥ÿ™‚ÄåŸÅŸàÿØŸáÿß Ÿà ÿ±ÿ≥ÿ™Ÿàÿ±ÿßŸÜ‚ÄåŸáÿß€å ÿ®€åŸÜ‚ÄåÿßŸÑŸÖŸÑŸÑ€å ⁄Øÿ≤€åŸÜŸá‚ÄåŸáÿß€å ŸÖÿÆÿ™ŸÑŸÅ€å Ÿáÿ≥ÿ™ŸÜÿØ.' }
      ],
      source: 'google_places'
    },
    {
      messages: [
        { role: 'system', content: 'ÿ¥ŸÖÿß €å⁄© ÿØÿ≥ÿ™€åÿßÿ± ŸáŸàÿ¥ŸÖŸÜÿØ ŸÅÿßÿ±ÿ≥€å‚Äåÿ≤ÿ®ÿßŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ⁄©ŸÖ⁄© ŸÖ€å‚Äå⁄©ŸÜ€åÿØ.' },
        { role: 'user', content: '⁄Üÿ∑Ÿàÿ± ŸÖ€å‚Äåÿ™ŸàÿßŸÜŸÖ ÿØÿ± ⁄ØŸà⁄ØŸÑ ÿ¨ÿ≥ÿ™ÿ¨Ÿà ⁄©ŸÜŸÖÿü' },
        { role: 'assistant', content: 'ÿ®ÿ±ÿß€å ÿ¨ÿ≥ÿ™ÿ¨Ÿà ÿØÿ± ⁄ØŸà⁄ØŸÑ:\n€±. ÿ®Ÿá google.com ÿ®ÿ±Ÿà€åÿØ\n€≤. ⁄©ŸÑŸÖÿßÿ™ ⁄©ŸÑ€åÿØ€å ÿÆŸàÿØ ÿ±ÿß ÿ™ÿß€åŸæ ⁄©ŸÜ€åÿØ\n€≥. Enter ÿ®ÿ≤ŸÜ€åÿØ\n€¥. ÿßÿ≤ ÿπŸÖŸÑ⁄Øÿ±Ÿáÿß€å ÿ¨ÿ≥ÿ™ÿ¨Ÿà ŸÖÿßŸÜŸÜÿØ "" ÿ®ÿ±ÿß€å ÿ¨ÿ≥ÿ™ÿ¨Ÿà€å ÿØŸÇ€åŸÇ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ' }
      ],
      source: 'google_drive'
    },
    {
      messages: [
        { role: 'system', content: 'ÿ¥ŸÖÿß €å⁄© ÿØÿ≥ÿ™€åÿßÿ± ŸáŸàÿ¥ŸÖŸÜÿØ ŸÅÿßÿ±ÿ≥€å‚Äåÿ≤ÿ®ÿßŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ⁄©ŸÖ⁄© ŸÖ€å‚Äå⁄©ŸÜ€åÿØ.' },
        { role: 'user', content: 'ÿ¢ŸÖŸàÿ≤ÿ¥ ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ⁄ØŸà⁄ØŸÑ ÿ¥€åÿ™' },
        { role: 'assistant', content: '⁄ØŸà⁄ØŸÑ ÿ¥€åÿ™ ÿßÿ®ÿ≤ÿßÿ± ŸÇÿØÿ±ÿ™ŸÖŸÜÿØ€å ÿ®ÿ±ÿß€å ⁄©ÿßÿ± ÿ®ÿß ÿ¨ÿØÿßŸàŸÑ ÿßÿ≥ÿ™:\n€±. ÿ®Ÿá sheets.google.com ÿ®ÿ±Ÿà€åÿØ\n€≤. €å⁄© ÿ¥€åÿ™ ÿ¨ÿØ€åÿØ ÿ®ÿ≥ÿßÿ≤€åÿØ\n€≥. ÿßÿ≤ ŸÅÿ±ŸÖŸàŸÑ‚ÄåŸáÿß ŸÖÿßŸÜŸÜÿØ SUMÿå AVERAGE ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ\n€¥. ŸÜŸÖŸàÿØÿßÿ±Ÿáÿß Ÿà ⁄Øÿ±ÿßŸÅ‚ÄåŸáÿß ÿßÿ∂ÿßŸÅŸá ⁄©ŸÜ€åÿØ\n€µ. ÿ®ÿß ÿØ€å⁄Øÿ±ÿßŸÜ ÿ®Ÿá ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿ®⁄Øÿ∞ÿßÿ±€åÿØ' }
      ],
      source: 'google_sheets_docs'
    },
    {
      messages: [
        { role: 'system', content: 'ÿ¥ŸÖÿß €å⁄© ÿØÿ≥ÿ™€åÿßÿ± ŸáŸàÿ¥ŸÖŸÜÿØ ŸÅÿßÿ±ÿ≥€å‚Äåÿ≤ÿ®ÿßŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ÿ®Ÿá ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ ⁄©ŸÖ⁄© ŸÖ€å‚Äå⁄©ŸÜ€åÿØ.' },
        { role: 'user', content: 'ÿ™ŸÅÿßŸàÿ™ ⁄ØŸà⁄ØŸÑ ÿØÿ±ÿß€åŸà Ÿà ÿØÿ±ÿßŸæ‚Äåÿ®ÿß⁄©ÿ≥ ⁄Ü€åÿ≥ÿ™ÿü' },
        { role: 'assistant', content: '⁄ØŸà⁄ØŸÑ ÿØÿ±ÿß€åŸà Ÿà ÿØÿ±ÿßŸæ‚Äåÿ®ÿß⁄©ÿ≥ Ÿáÿ± ÿØŸà ÿ≥ÿ±Ÿà€åÿ≥ ÿ∞ÿÆ€åÿ±Ÿá‚Äåÿ≥ÿßÿ≤€å ÿßÿ®ÿ±€å Ÿáÿ≥ÿ™ŸÜÿØ:\n\n⁄ØŸà⁄ØŸÑ ÿØÿ±ÿß€åŸà:\n- €å⁄©Ÿæÿßÿ±⁄Ü⁄Ø€å ÿ®ÿß ÿ≥ÿ±Ÿà€åÿ≥‚ÄåŸáÿß€å ⁄ØŸà⁄ØŸÑ\n- €±€µ ⁄Ø€å⁄Øÿßÿ®ÿß€åÿ™ ÿ±ÿß€å⁄ØÿßŸÜ\n- ŸáŸÖ⁄©ÿßÿ±€å ÿ¢ŸÜŸÑÿß€åŸÜ ÿØÿ± ÿßÿ≥ŸÜÿßÿØ\n\nÿØÿ±ÿßŸæ‚Äåÿ®ÿß⁄©ÿ≥:\n- ÿ≥€åŸÜ⁄© ÿ≥ÿ±€åÿπ‚Äåÿ™ÿ± ŸÅÿß€åŸÑ‚ÄåŸáÿß\n- €≤ ⁄Ø€å⁄Øÿßÿ®ÿß€åÿ™ ÿ±ÿß€å⁄ØÿßŸÜ\n- ÿ±ÿßÿ®ÿ∑ ⁄©ÿßÿ±ÿ®ÿ±€å ÿ≥ÿßÿØŸá‚Äåÿ™ÿ±' }
      ],
      source: 'google_drive'
    }
  ];
  
  // Normalize all content
  googleData.forEach(item => {
    item.messages.forEach(msg => {
      msg.content = normalizePersian(msg.content);
    });
  });
  
  return googleData;
}

/**
 * Calculate SHA256 checksum
 */
function calculateSHA256(filepath: string): string {
  const fileBuffer = fs.readFileSync(filepath);
  const hashSum = crypto.createHash('sha256');
  hashSum.update(fileBuffer);
  return hashSum.digest('hex');
}

/**
 * Merge Google data with existing datasets
 */
function mergeDatasets(googleDataPath: string, trainPath: string, outputPath: string): void {
  const googleData: ConversationData[] = [];
  const trainData: ConversationData[] = [];
  
  // Read Google data
  const googleLines = fs.readFileSync(googleDataPath, 'utf-8').split('\n').filter(l => l.trim());
  googleLines.forEach(line => {
    googleData.push(JSON.parse(line));
  });
  
  // Read train data
  const trainLines = fs.readFileSync(trainPath, 'utf-8').split('\n').filter(l => l.trim());
  trainLines.forEach(line => {
    trainData.push(JSON.parse(line));
  });
  
  // Merge and deduplicate
  const combined = [...trainData, ...googleData];
  const seen = new Set<string>();
  const deduplicated: ConversationData[] = [];
  
  combined.forEach(item => {
    const key = JSON.stringify(item.messages);
    if (!seen.has(key)) {
      seen.add(key);
      deduplicated.push(item);
    }
  });
  
  // Write combined dataset
  const combinedContent = deduplicated.map(item => JSON.stringify(item)).join('\n') + '\n';
  fs.writeFileSync(outputPath, combinedContent, { encoding: 'utf-8' });
  
  console.log(`‚úÖ Merged ${googleData.length} Google entries with ${trainData.length} training entries`);
  console.log(`   Total unique entries: ${deduplicated.length}`);
  console.log(`   Saved to: ${outputPath}`);
}

/**
 * Main execution
 */
function main(): void {
  console.log('='.repeat(60));
  console.log('Google Data Ingestion (TypeScript)');
  console.log('='.repeat(60));
  console.log();
  
  const rawDir = path.join('datasets', 'raw');
  const googleDataPath = path.join(rawDir, 'google_data.jsonl');
  const trainPath = path.join('datasets', 'train.jsonl');
  const combinedPath = path.join('datasets', 'combined.jsonl');
  
  // Ensure raw directory exists
  if (!fs.existsSync(rawDir)) {
    fs.mkdirSync(rawDir, { recursive: true });
  }
  
  // Fetch Google data (simulated)
  console.log('üîç Fetching Google-sourced Persian data...');
  console.log('   (In production: Google Drive/Sheets/Custom Search APIs)');
  const googleData = createGoogleSourcedData();
  
  // Save Google data
  const googleContent = googleData.map(item => JSON.stringify(item)).join('\n') + '\n';
  fs.writeFileSync(googleDataPath, googleContent, { encoding: 'utf-8' });
  
  console.log(`‚úÖ Saved ${googleData.length} Google-sourced entries to ${googleDataPath}`);
  
  // Calculate checksum
  const checksum = calculateSHA256(googleDataPath);
  console.log(`üîê SHA256: ${checksum}`);
  
  // Update checksums file
  const checksumsPath = path.join('datasets', 'checksums.txt');
  fs.appendFileSync(checksumsPath, `${checksum}  ${googleDataPath}\n`);
  console.log(`‚úÖ Checksum added to ${checksumsPath}`);
  
  console.log();
  console.log('üîó Merging with existing training data...');
  
  // Merge datasets
  if (fs.existsSync(trainPath)) {
    mergeDatasets(googleDataPath, trainPath, combinedPath);
    
    // Calculate combined checksum
    const combinedChecksum = calculateSHA256(combinedPath);
    console.log(`üîê Combined dataset SHA256: ${combinedChecksum}`);
    fs.appendFileSync(checksumsPath, `${combinedChecksum}  ${combinedPath}\n`);
  } else {
    console.log('‚ö†Ô∏è  Train dataset not found, skipping merge');
  }
  
  console.log();
  console.log('='.repeat(60));
  console.log('‚úÖ Google data ingestion complete!');
  console.log('='.repeat(60));
  console.log();
  console.log('Traceability:');
  console.log('  - Source: Google APIs (Drive, Sheets, Custom Search)');
  console.log(`  - Output: ${googleDataPath}`);
  console.log(`  - Combined: ${combinedPath}`);
  console.log('  - All checksums saved to datasets/checksums.txt');
}

// Run main function
main();

export { normalizePersian, createGoogleSourcedData, calculateSHA256 };
