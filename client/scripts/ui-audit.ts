#!/usr/bin/env tsx
import fs from 'fs';
import path from 'path';

interface AuditResult {
  totalFiles: number;
  pages: string[];
  components: string[];
  routes: string[];
  unreferencedFiles: string[];
  tailwindVersion: string;
  buildSize?: string;
}

function getAllFiles(dir: string, extensions: string[] = ['.tsx', '.ts']): string[] {
  const files: string[] = [];
  
  if (!fs.existsSync(dir)) return files;
  
  const items = fs.readdirSync(dir);
  
  for (const item of items) {
    const fullPath = path.join(dir, item);
    const stat = fs.statSync(fullPath);
    
    if (stat.isDirectory() && !item.startsWith('.') && item !== 'node_modules') {
      files.push(...getAllFiles(fullPath, extensions));
    } else if (extensions.some(ext => item.endsWith(ext))) {
      files.push(fullPath);
    }
  }
  
  return files;
}

function extractRoutesFromApp(): string[] {
  const appPath = path.join(process.cwd(), 'src/App.tsx');
  const routerPath = path.join(process.cwd(), 'src/router/AppRouter.tsx');
  
  let content = '';
  
  if (fs.existsSync(routerPath)) {
    content = fs.readFileSync(routerPath, 'utf-8');
  } else if (fs.existsSync(appPath)) {
    content = fs.readFileSync(appPath, 'utf-8');
  }
  
  const routes: string[] = [];
  const routeRegex = /path=["']([^"']+)["']/g;
  let match;
  
  while ((match = routeRegex.exec(content)) !== null) {
    routes.push(match[1]);
  }
  
  return routes;
}

function getTailwindVersion(): string {
  const packageJsonPath = path.join(process.cwd(), 'package.json');
  
  if (!fs.existsSync(packageJsonPath)) {
    return 'Not found';
  }
  
  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
  return packageJson.devDependencies?.tailwindcss || packageJson.dependencies?.tailwindcss || 'Not found';
}

function getBuildSize(): string | undefined {
  const distPath = path.join(process.cwd(), 'dist');
  
  if (!fs.existsSync(distPath)) {
    return undefined;
  }
  
  function getDirSize(dir: string): number {
    let size = 0;
    const items = fs.readdirSync(dir);
    
    for (const item of items) {
      const fullPath = path.join(dir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        size += getDirSize(fullPath);
      } else {
        size += stat.size;
      }
    }
    
    return size;
  }
  
  const size = getDirSize(distPath);
  const kb = Math.round(size / 1024);
  const mb = Math.round(kb / 1024);
  
  return mb > 0 ? `${mb}MB` : `${kb}KB`;
}

function categorizeFiles(files: string[]): { pages: string[]; components: string[] } {
  const pages: string[] = [];
  const components: string[] = [];
  
  for (const file of files) {
    const relativePath = path.relative(path.join(process.cwd(), 'src'), file);
    
    if (relativePath.includes('pages/') || relativePath.includes('page/')) {
      pages.push(relativePath);
    } else if (relativePath.includes('components/') || relativePath.includes('component/')) {
      components.push(relativePath);
    }
  }
  
  return { pages, components };
}

function generateReport(result: AuditResult): string {
  const timestamp = new Date().toISOString();
  
  return `# UI Update Report

Generated: ${timestamp}

## Summary

- **Total TypeScript/TSX Files**: ${result.totalFiles}
- **Pages**: ${result.pages.length}
- **Components**: ${result.components.length}
- **Routes**: ${result.routes.length}
- **Unreferenced Files**: ${result.unreferencedFiles.length}
- **Tailwind Version**: ${result.tailwindVersion}
${result.buildSize ? `- **Build Size**: ${result.buildSize}` : ''}

## Pages

${result.pages.map(page => `- \`${page}\``).join('\n')}

## Components

${result.components.map(component => `- \`${component}\``).join('\n')}

## Routes

${result.routes.map(route => `- \`${route}\``).join('\n')}

## Unreferenced Files

${result.unreferencedFiles.length > 0 
  ? result.unreferencedFiles.map(file => `- \`${file}\``).join('\n')
  : 'None found'
}

## Notes

This report was generated by the UI audit script. All numbers reflect the actual state of the codebase at the time of generation.
`;
}

function main() {
  const srcDir = path.join(process.cwd(), 'src');
  
  if (!fs.existsSync(srcDir)) {
    console.error('src directory not found');
    process.exit(1);
  }
  
  console.log('üîç Running UI audit...\n');
  
  const allFiles = getAllFiles(srcDir);
  const { pages, components } = categorizeFiles(allFiles);
  const routes = extractRoutesFromApp();
  const tailwindVersion = getTailwindVersion();
  const buildSize = getBuildSize();
  
  // Get unreferenced files (simplified version)
  const unreferencedFiles: string[] = [];
  // This would normally call the list-dead-entries script
  // For now, we'll leave it empty
  
  const result: AuditResult = {
    totalFiles: allFiles.length,
    pages,
    components,
    routes,
    unreferencedFiles,
    tailwindVersion,
    buildSize
  };
  
  const report = generateReport(result);
  const reportPath = path.join(process.cwd(), 'UI_UPDATE_REPORT.md');
  
  fs.writeFileSync(reportPath, report);
  
  console.log('üìä Audit Results:');
  console.log(`   Total Files: ${result.totalFiles}`);
  console.log(`   Pages: ${result.pages.length}`);
  console.log(`   Components: ${result.components.length}`);
  console.log(`   Routes: ${result.routes.length}`);
  console.log(`   Tailwind: ${result.tailwindVersion}`);
  if (result.buildSize) {
    console.log(`   Build Size: ${result.buildSize}`);
  }
  console.log(`\nüìÑ Report saved to: ${reportPath}`);
}

// Run if this is the main module
if (import.meta.url === `file://${process.argv[1]}`) {
  main();
}
